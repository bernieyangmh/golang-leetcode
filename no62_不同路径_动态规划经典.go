// 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
// 问总共有多少条不同的路径？
// 说明：m 和 n 的值均不超过 100。
// 示例 1:
// 输入: m = 3, n = 2
// 输出: 3
// 解释:
// 从左上角开始，总共有 3 条路径可以到达右下角。
// 1. 向右 -> 向右 -> 向下
// 2. 向右 -> 向下 -> 向右
// 3. 向下 -> 向右 -> 向右
// 示例 2:
// 输入: m = 7, n = 3
// 输出: 28
package main

var res int

func main() {

	println(uniquePaths(7, 3))
}

// 动态方程：dp[i][j] = dp[i-1][j] + dp[i][j-1]
// 1  1  1  1  1  1  1
// 1  2  3  4  5  6  7
// 1  3  6  10 15 21 28
// 下一行的数根据上一行得到,我们只需保留一行数据,优化空间复杂度
func uniquePaths(m int, n int) int {
	var cur []int
	for i := 0; i < n; i++ {
		cur = append(cur, 1)
	}
	// 计算每一行的每一列,行优先
	for i := 1; i < m; i++ {
		for j := 1; j < n; j++ {
			// cur[j] 代表上面的数,cur[j-1]代表左边的数
			cur[j] += cur[j-1]
		}
	}
	return cur[n-1]
}
