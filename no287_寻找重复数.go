package main


//给定一个包含 n + 1 个整数的数组 nums，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。
//假设只有一个重复的整数，找出这个重复的数。
//示例 1:
//输入: [1,3,4,2,2]
//输出: 2
//示例 2:
//输入: [3,1,3,4,2]
//输出: 3
//说明：
//不能更改原数组（假设数组是只读的）。
//只能使用额外的 O(1) 的空间。
//时间复杂度小于 O(n2) 。
//数组中只有一个重复的数字，但它可能不止重复出现一次。

//不符合条件但常用的算法
//1.排序
//2.hash


//  类似No.142
//	快慢指针，当两个指针再次相遇，该点距环入口长度为c
//	开头距离入口长度a；整个环长度为b
// 	2*(a+c) = a+b+c  慢指针走了a+c， 快指针走了a+b+c
//	a=b+c 则慢指针和开头一起走，最终相遇的地方就是a，环入口
func findDuplicate(nums []int) int {
	t := nums[0]
	h := nums[0]

	for {
		t = nums[t]
		h = nums[nums[h]]
		if t == h {
			break
		}
	}
	p1 := nums[0]
	p2 := t
	for {
		p1 = nums[p1]
		p2 = nums[p2]
		if p1 == p2 {
			return p1
		}
	}
}