package main

// 你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。
// 给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。
// 示例 1:
// 输入: [1,2,3,1]
// 输出: 4
// 解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
//      偷窃到的最高金额 = 1 + 3 = 4 。
// 示例 2:
// 输入: [2,7,9,3,1]
// 输出: 12
// 解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
//      偷窃到的最高金额 = 2 + 9 + 1 = 12 。

// 动态规划
// 我们本质上在解决对于第[i] 个房子，我们抢还是不抢。的问题。
// 判断的标准就是总价值哪个更大， 那么对于抢的话就是当前的房子可以抢的价值 + dp[i - 2]
// i - 1 不能抢，否则会触发警铃
// 如果不抢的话，就是dp[i - 1].
// 状态转移方程 dp[i] = Math.max(dp[i - 2] + nums[i - 2], dp[i - 1])
func rob(nums []int) int {
	var prev, cur, tmp int
	if len(nums) == 1 {
		return nums[0]
	}
	if len(nums) == 0 {
		return 0
	}
	prev = nums[0]
	cur = max(nums[0], nums[1])

	for i := 2; i < len(nums); i++ {
		tmp = cur
		cur = max(prev+nums[i], cur)
		prev = tmp
	}
	return cur

}
func max(a, b int) int {
	if a > b {
		return a
	}
	return b
}
