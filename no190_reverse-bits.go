package main

// 颠倒给定的 32 位无符号整数的二进制位。
// 示例 1：
// 输入: 00000010100101000001111010011100
// 输出: 00111001011110000010100101000000
// 解释: 输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//       因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。
// 示例 2：
// 输入：11111111111111111111111111111101
// 输出：10111111111111111111111111111111
// 解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//       因此返回 3221225471 其二进制表示形式为 10101111110010110010011101101001。

import (
	"fmt"
)

func main() {

	var a uint32
	a = 43261596

	reverseBits(a)

}

// 每一位根据num的值确定0，1， result进位，num退位
func reverseBits(num uint32) uint32 {
	var result uint32
	for i := 0; i < 32; i++ {
		result = (result << 1) + (num & 1)
		fmt.Println(result, num, num>>1)
		num >>= 1
	}
	return result
}
